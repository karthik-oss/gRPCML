# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import generic_model_pb2 as generic__model__pb2


class GenericMLServicesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConfigureModelParameters = channel.unary_unary(
                '/model_grpc_service.GenericMLServices/ConfigureModelParameters',
                request_serializer=generic__model__pb2.generic_msg_dataframe.SerializeToString,
                response_deserializer=generic__model__pb2.ack_modelupdate.FromString,
                )
        self.TrainModel = channel.unary_unary(
                '/model_grpc_service.GenericMLServices/TrainModel',
                request_serializer=generic__model__pb2.generic_msg_dataframe.SerializeToString,
                response_deserializer=generic__model__pb2.generic_msg_dataframe.FromString,
                )
        self.InferModel = channel.unary_unary(
                '/model_grpc_service.GenericMLServices/InferModel',
                request_serializer=generic__model__pb2.generic_msg_dataframe.SerializeToString,
                response_deserializer=generic__model__pb2.generic_msg_dataframe.FromString,
                )


class GenericMLServicesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ConfigureModelParameters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrainModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InferModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GenericMLServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConfigureModelParameters': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureModelParameters,
                    request_deserializer=generic__model__pb2.generic_msg_dataframe.FromString,
                    response_serializer=generic__model__pb2.ack_modelupdate.SerializeToString,
            ),
            'TrainModel': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainModel,
                    request_deserializer=generic__model__pb2.generic_msg_dataframe.FromString,
                    response_serializer=generic__model__pb2.generic_msg_dataframe.SerializeToString,
            ),
            'InferModel': grpc.unary_unary_rpc_method_handler(
                    servicer.InferModel,
                    request_deserializer=generic__model__pb2.generic_msg_dataframe.FromString,
                    response_serializer=generic__model__pb2.generic_msg_dataframe.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'model_grpc_service.GenericMLServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GenericMLServices(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ConfigureModelParameters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model_grpc_service.GenericMLServices/ConfigureModelParameters',
            generic__model__pb2.generic_msg_dataframe.SerializeToString,
            generic__model__pb2.ack_modelupdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrainModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model_grpc_service.GenericMLServices/TrainModel',
            generic__model__pb2.generic_msg_dataframe.SerializeToString,
            generic__model__pb2.generic_msg_dataframe.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InferModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model_grpc_service.GenericMLServices/InferModel',
            generic__model__pb2.generic_msg_dataframe.SerializeToString,
            generic__model__pb2.generic_msg_dataframe.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
